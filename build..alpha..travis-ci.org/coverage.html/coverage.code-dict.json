{"/home/travis/build/npmtest/node-npmtest-react-scripts/test.js":"/* istanbul instrument in package npmtest_react_scripts */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-scripts/lib.npmtest_react_scripts.js":"/* istanbul instrument in package npmtest_react_scripts */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_scripts = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_scripts = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-scripts/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-scripts && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_scripts */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_scripts\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_scripts.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_scripts.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_scripts.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_scripts.__dirname + '/lib.npmtest_react_scripts.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-scripts/node_modules/react-scripts/bin/react-scripts.js":"#!/usr/bin/env node\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\nvar spawn = require('cross-spawn');\nvar script = process.argv[2];\nvar args = process.argv.slice(3);\n\nswitch (script) {\ncase 'build':\ncase 'eject':\ncase 'start':\ncase 'test':\n  var result = spawn.sync(\n    'node',\n    [require.resolve('../scripts/' + script)].concat(args),\n    {stdio: 'inherit'}\n  );\n  if (result.signal) {\n    if (result.signal === 'SIGKILL') {\n      console.log(\n        'The build failed because the process exited too early. ' +\n        'This probably means the system ran out of memory or someone called ' +\n        '`kill -9` on the process.'\n      );\n    } else if (result.signal === 'SIGTERM') {\n      console.log(\n        'The build failed because the process exited too early. ' +\n        'Someone might have called `kill` or `killall`, or the system could ' +\n        'be shutting down.'\n      );\n    }\n    process.exit(1);\n  }\n  process.exit(result.status);\n  break;\ndefault:\n  console.log('Unknown script \"' + script + '\".');\n  console.log('Perhaps you need to update react-scripts?');\n  console.log('See: https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#updating-to-new-releases');\n  break;\n}\n","/home/travis/build/npmtest/node-npmtest-react-scripts/node_modules/react-scripts/config/env.js":"// @remove-on-eject-begin\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n// @remove-on-eject-end\n'use strict';\n\n// Grab NODE_ENV and REACT_APP_* environment variables and prepare them to be\n// injected into the application via DefinePlugin in Webpack configuration.\n\nvar REACT_APP = /^REACT_APP_/i;\n\nfunction getClientEnvironment(publicUrl) {\n  var raw = Object\n    .keys(process.env)\n    .filter(key => REACT_APP.test(key))\n    .reduce((env, key) => {\n      env[key] = process.env[key];\n      return env;\n    }, {\n      // Useful for determining whether we’re running in production mode.\n      // Most importantly, it switches React into the correct mode.\n      'NODE_ENV': process.env.NODE_ENV || 'development',\n      // Useful for resolving the correct path to static assets in `public`.\n      // For example, <img src={process.env.PUBLIC_URL + '/img/logo.png'} />.\n      // This should only be used as an escape hatch. Normally you would put\n      // images into the `src` and `import` them in code to get their paths.\n      'PUBLIC_URL': publicUrl\n    });\n  // Stringify all values so we can feed into Webpack DefinePlugin\n  var stringified = {\n    'process.env': Object\n      .keys(raw)\n      .reduce((env, key) => {\n        env[key] = JSON.stringify(raw[key]);\n        return env;\n      }, {})\n  };\n\n  return { raw, stringified };\n}\n\nmodule.exports = getClientEnvironment;\n","/home/travis/build/npmtest/node-npmtest-react-scripts/node_modules/react-scripts/config/paths.js":"// @remove-on-eject-begin\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n// @remove-on-eject-end\n'use strict';\n\nvar path = require('path');\nvar fs = require('fs');\nvar url = require('url');\n\n// Make sure any symlinks in the project folder are resolved:\n// https://github.com/facebookincubator/create-react-app/issues/637\nvar appDirectory = fs.realpathSync(process.cwd());\nfunction resolveApp(relativePath) {\n  return path.resolve(appDirectory, relativePath);\n}\n\n// We support resolving modules according to `NODE_PATH`.\n// This lets you use absolute paths in imports inside large monorepos:\n// https://github.com/facebookincubator/create-react-app/issues/253.\n\n// It works similar to `NODE_PATH` in Node itself:\n// https://nodejs.org/api/modules.html#modules_loading_from_the_global_folders\n\n// We will export `nodePaths` as an array of absolute paths.\n// It will then be used by Webpack configs.\n// Jest doesn’t need this because it already handles `NODE_PATH` out of the box.\n\n// Note that unlike in Node, only *relative* paths from `NODE_PATH` are honored.\n// Otherwise, we risk importing Node.js core modules into an app instead of Webpack shims.\n// https://github.com/facebookincubator/create-react-app/issues/1023#issuecomment-265344421\n\nvar nodePaths = (process.env.NODE_PATH || '')\n  .split(process.platform === 'win32' ? ';' : ':')\n  .filter(Boolean)\n  .filter(folder => !path.isAbsolute(folder))\n  .map(resolveApp);\n\nvar envPublicUrl = process.env.PUBLIC_URL;\n\nfunction ensureSlash(path, needsSlash) {\n  var hasSlash = path.endsWith('/');\n  if (hasSlash && !needsSlash) {\n    return path.substr(path, path.length - 1);\n  } else if (!hasSlash && needsSlash) {\n    return path + '/';\n  } else {\n    return path;\n  }\n}\n\nfunction getPublicUrl(appPackageJson) {\n  return envPublicUrl || require(appPackageJson).homepage;\n}\n\n// We use `PUBLIC_URL` environment variable or \"homepage\" field to infer\n// \"public path\" at which the app is served.\n// Webpack needs to know it to put the right <script> hrefs into HTML even in\n// single-page apps that may serve index.html for nested URLs like /todos/42.\n// We can't use a relative path in HTML because we don't want to load something\n// like /todos/42/static/js/bundle.7289d.js. We have to know the root.\nfunction getServedPath(appPackageJson) {\n  var publicUrl = getPublicUrl(appPackageJson);\n  var servedUrl = envPublicUrl || (\n    publicUrl ? url.parse(publicUrl).pathname : '/'\n  );\n  return ensureSlash(servedUrl, true);\n}\n\n// config after eject: we're in ./config/\nmodule.exports = {\n  appBuild: resolveApp('build'),\n  appPublic: resolveApp('public'),\n  appHtml: resolveApp('public/index.html'),\n  appIndexJs: resolveApp('src/index.js'),\n  appPackageJson: resolveApp('package.json'),\n  appSrc: resolveApp('src'),\n  yarnLockFile: resolveApp('yarn.lock'),\n  testsSetup: resolveApp('src/setupTests.js'),\n  appNodeModules: resolveApp('node_modules'),\n  nodePaths: nodePaths,\n  publicUrl: getPublicUrl(resolveApp('package.json')),\n  servedPath: getServedPath(resolveApp('package.json'))\n};\n\n// @remove-on-eject-begin\nfunction resolveOwn(relativePath) {\n  return path.resolve(__dirname, '..', relativePath);\n}\n\n// config before eject: we're in ./node_modules/react-scripts/config/\nmodule.exports = {\n  appPath: resolveApp('.'),\n  appBuild: resolveApp('build'),\n  appPublic: resolveApp('public'),\n  appHtml: resolveApp('public/index.html'),\n  appIndexJs: resolveApp('src/index.js'),\n  appPackageJson: resolveApp('package.json'),\n  appSrc: resolveApp('src'),\n  yarnLockFile: resolveApp('yarn.lock'),\n  testsSetup: resolveApp('src/setupTests.js'),\n  appNodeModules: resolveApp('node_modules'),\n  nodePaths: nodePaths,\n  publicUrl: getPublicUrl(resolveApp('package.json')),\n  servedPath: getServedPath(resolveApp('package.json')),\n  // These properties only exist before ejecting:\n  ownPath: resolveOwn('.'),\n  ownNodeModules: resolveOwn('node_modules'), // This is empty on npm 3\n};\n\nvar ownPackageJson = require('../package.json');\nvar reactScriptsPath = resolveApp(`node_modules/${ownPackageJson.name}`);\nvar reactScriptsLinked = fs.existsSync(reactScriptsPath) && fs.lstatSync(reactScriptsPath).isSymbolicLink();\n\n// config before publish: we're in ./packages/react-scripts/config/\nif (!reactScriptsLinked && __dirname.indexOf(path.join('packages', 'react-scripts', 'config')) !== -1) {\n  module.exports = {\n    appPath: resolveApp('.'),\n    appBuild: resolveOwn('../../build'),\n    appPublic: resolveOwn('template/public'),\n    appHtml: resolveOwn('template/public/index.html'),\n    appIndexJs: resolveOwn('template/src/index.js'),\n    appPackageJson: resolveOwn('package.json'),\n    appSrc: resolveOwn('template/src'),\n    yarnLockFile: resolveOwn('template/yarn.lock'),\n    testsSetup: resolveOwn('template/src/setupTests.js'),\n    appNodeModules: resolveOwn('node_modules'),\n    nodePaths: nodePaths,\n    publicUrl: getPublicUrl(resolveOwn('package.json')),\n    servedPath: getServedPath(resolveOwn('package.json')),\n    // These properties only exist before ejecting:\n    ownPath: resolveOwn('.'),\n    ownNodeModules: resolveOwn('node_modules'),\n  };\n}\n// @remove-on-eject-end\n","/home/travis/build/npmtest/node-npmtest-react-scripts/node_modules/react-scripts/config/polyfills.js":"// @remove-on-eject-begin\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n// @remove-on-eject-end\n'use strict';\n\nif (typeof Promise === 'undefined') {\n  // Rejection tracking prevents a common issue where React gets into an\n  // inconsistent state due to an error, but it gets swallowed by a Promise,\n  // and the user has no idea what causes React's erratic future behavior.\n  require('promise/lib/rejection-tracking').enable();\n  window.Promise = require('promise/lib/es6-extensions.js');\n}\n\n// fetch() polyfill for making API calls.\nrequire('whatwg-fetch');\n\n// Object.assign() is commonly used with React.\n// It will use the native implementation if it's present and isn't buggy.\nObject.assign = require('object-assign');\n","/home/travis/build/npmtest/node-npmtest-react-scripts/node_modules/react-scripts/config/webpack.config.dev.js":"// @remove-on-eject-begin\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n// @remove-on-eject-end\n'use strict';\n\nvar autoprefixer = require('autoprefixer');\nvar webpack = require('webpack');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar CaseSensitivePathsPlugin = require('case-sensitive-paths-webpack-plugin');\nvar InterpolateHtmlPlugin = require('react-dev-utils/InterpolateHtmlPlugin');\nvar WatchMissingNodeModulesPlugin = require('react-dev-utils/WatchMissingNodeModulesPlugin');\nvar getClientEnvironment = require('./env');\nvar paths = require('./paths');\n\n// @remove-on-eject-begin\n// `path` is not used after eject - see https://github.com/facebookincubator/create-react-app/issues/1174\nvar path = require('path');\n// @remove-on-eject-end\n\n// Webpack uses `publicPath` to determine where the app is being served from.\n// In development, we always serve from the root. This makes config easier.\nvar publicPath = '/';\n// `publicUrl` is just like `publicPath`, but we will provide it to our app\n// as %PUBLIC_URL% in `index.html` and `process.env.PUBLIC_URL` in JavaScript.\n// Omit trailing slash as %PUBLIC_PATH%/xyz looks better than %PUBLIC_PATH%xyz.\nvar publicUrl = '';\n// Get environment variables to inject into our app.\nvar env = getClientEnvironment(publicUrl);\n\n// This is the development configuration.\n// It is focused on developer experience and fast rebuilds.\n// The production configuration is different and lives in a separate file.\nmodule.exports = {\n  // You may want 'eval' instead if you prefer to see the compiled output in DevTools.\n  // See the discussion in https://github.com/facebookincubator/create-react-app/issues/343.\n  devtool: 'cheap-module-source-map',\n  // These are the \"entry points\" to our application.\n  // This means they will be the \"root\" imports that are included in JS bundle.\n  // The first two entry points enable \"hot\" CSS and auto-refreshes for JS.\n  entry: [\n    // Include an alternative client for WebpackDevServer. A client's job is to\n    // connect to WebpackDevServer by a socket and get notified about changes.\n    // When you save a file, the client will either apply hot updates (in case\n    // of CSS changes), or refresh the page (in case of JS changes). When you\n    // make a syntax error, this client will display a syntax error overlay.\n    // Note: instead of the default WebpackDevServer client, we use a custom one\n    // to bring better experience for Create React App users. You can replace\n    // the line below with these two lines if you prefer the stock client:\n    // require.resolve('webpack-dev-server/client') + '?/',\n    // require.resolve('webpack/hot/dev-server'),\n    require.resolve('react-dev-utils/webpackHotDevClient'),\n    // We ship a few polyfills by default:\n    require.resolve('./polyfills'),\n    // Finally, this is your app's code:\n    paths.appIndexJs\n    // We include the app code last so that if there is a runtime error during\n    // initialization, it doesn't blow up the WebpackDevServer client, and\n    // changing JS code would still trigger a refresh.\n  ],\n  output: {\n    // Next line is not used in dev but WebpackDevServer crashes without it:\n    path: paths.appBuild,\n    // Add /* filename */ comments to generated require()s in the output.\n    pathinfo: true,\n    // This does not produce a real file. It's just the virtual path that is\n    // served by WebpackDevServer in development. This is the JS bundle\n    // containing code from all our entry points, and the Webpack runtime.\n    filename: 'static/js/bundle.js',\n    // This is the URL that app is served from. We use \"/\" in development.\n    publicPath: publicPath\n  },\n  resolve: {\n    // This allows you to set a fallback for where Webpack should look for modules.\n    // We read `NODE_PATH` environment variable in `paths.js` and pass paths here.\n    // We use `fallback` instead of `root` because we want `node_modules` to \"win\"\n    // if there any conflicts. This matches Node resolution mechanism.\n    // https://github.com/facebookincubator/create-react-app/issues/253\n    fallback: paths.nodePaths,\n    // These are the reasonable defaults supported by the Node ecosystem.\n    // We also include JSX as a common component filename extension to support\n    // some tools, although we do not recommend using it, see:\n    // https://github.com/facebookincubator/create-react-app/issues/290\n    extensions: ['.js', '.json', '.jsx', ''],\n    alias: {\n      // Support React Native Web\n      // https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/\n      'react-native': 'react-native-web'\n    }\n  },\n  // @remove-on-eject-begin\n  // Resolve loaders (webpack plugins for CSS, images, transpilation) from the\n  // directory of `react-scripts` itself rather than the project directory.\n  resolveLoader: {\n    root: paths.ownNodeModules,\n    moduleTemplates: ['*-loader']\n  },\n  // @remove-on-eject-end\n  module: {\n    // First, run the linter.\n    // It's important to do this before Babel processes the JS.\n    preLoaders: [\n      {\n        test: /\\.(js|jsx)$/,\n        loader: 'eslint',\n        include: paths.appSrc,\n      }\n    ],\n    loaders: [\n      // ** ADDING/UPDATING LOADERS **\n      // The \"url\" loader handles all assets unless explicitly excluded.\n      // The `exclude` list *must* be updated with every change to loader extensions.\n      // When adding a new loader, you must add its `test`\n      // as a new entry in the `exclude` list for \"url\" loader.\n\n      // \"url\" loader embeds assets smaller than specified size as data URLs to avoid requests.\n      // Otherwise, it acts like the \"file\" loader.\n      {\n        exclude: [\n          /\\.html$/,\n          // We have to write /\\.(js|jsx)(\\?.*)?$/ rather than just /\\.(js|jsx)$/\n          // because you might change the hot reloading server from the custom one\n          // to Webpack's built-in webpack-dev-server/client?/, which would not\n          // get properly excluded by /\\.(js|jsx)$/ because of the query string.\n          // Webpack 2 fixes this, but for now we include this hack.\n          // https://github.com/facebookincubator/create-react-app/issues/1713\n          /\\.(js|jsx)(\\?.*)?$/,\n          /\\.css$/,\n          /\\.json$/,\n          /\\.svg$/\n        ],\n        loader: 'url',\n        query: {\n          limit: 10000,\n          name: 'static/media/[name].[hash:8].[ext]'\n        }\n      },\n      // Process JS with Babel.\n      {\n        test: /\\.(js|jsx)$/,\n        include: paths.appSrc,\n        loader: 'babel',\n        query: {\n          // @remove-on-eject-begin\n          babelrc: false,\n          presets: [require.resolve('babel-preset-react-app')],\n          // @remove-on-eject-end\n          // This is a feature of `babel-loader` for webpack (not Babel itself).\n          // It enables caching results in ./node_modules/.cache/babel-loader/\n          // directory for faster rebuilds.\n          cacheDirectory: true\n        }\n      },\n      // \"postcss\" loader applies autoprefixer to our CSS.\n      // \"css\" loader resolves paths in CSS and adds assets as dependencies.\n      // \"style\" loader turns CSS into JS modules that inject <style> tags.\n      // In production, we use a plugin to extract that CSS to a file, but\n      // in development \"style\" loader enables hot editing of CSS.\n      {\n        test: /\\.css$/,\n        loader: 'style!css?importLoaders=1!postcss'\n      },\n      // JSON is not enabled by default in Webpack but both Node and Browserify\n      // allow it implicitly so we also enable it.\n      {\n        test: /\\.json$/,\n        loader: 'json'\n      },\n      // \"file\" loader for svg\n      {\n        test: /\\.svg$/,\n        loader: 'file',\n        query: {\n          name: 'static/media/[name].[hash:8].[ext]'\n        }\n      }\n      // ** STOP ** Are you adding a new loader?\n      // Remember to add the new extension(s) to the \"url\" loader exclusion list.\n    ]\n  },\n  // @remove-on-eject-begin\n  // Point ESLint to our predefined config.\n  eslint: {\n    configFile: path.join(__dirname, '../eslintrc'),\n    useEslintrc: false,\n  },\n  // @remove-on-eject-end\n  // We use PostCSS for autoprefixing only.\n  postcss: function() {\n    return [\n      autoprefixer({\n        browsers: [\n          '>1%',\n          'last 4 versions',\n          'Firefox ESR',\n          'not ie < 9', // React doesn't support IE8 anyway\n        ]\n      }),\n    ];\n  },\n  plugins: [\n    // Makes some environment variables available in index.html.\n    // The public URL is available as %PUBLIC_URL% in index.html, e.g.:\n    // <link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n    // In development, this will be an empty string.\n    new InterpolateHtmlPlugin(env.raw),\n    // Generates an `index.html` file with the <script> injected.\n    new HtmlWebpackPlugin({\n      inject: true,\n      template: paths.appHtml,\n    }),\n    // Makes some environment variables available to the JS code, for example:\n    // if (process.env.NODE_ENV === 'development') { ... }. See `./env.js`.\n    new webpack.DefinePlugin(env.stringified),\n    // This is necessary to emit hot updates (currently CSS only):\n    new webpack.HotModuleReplacementPlugin(),\n    // Watcher doesn't work well if you mistype casing in a path so we use\n    // a plugin that prints an error when you attempt to do this.\n    // See https://github.com/facebookincubator/create-react-app/issues/240\n    new CaseSensitivePathsPlugin(),\n    // If you require a missing module and then `npm install` it, you still have\n    // to restart the development server for Webpack to discover it. This plugin\n    // makes the discovery automatic so you don't have to restart.\n    // See https://github.com/facebookincubator/create-react-app/issues/186\n    new WatchMissingNodeModulesPlugin(paths.appNodeModules)\n  ],\n  // Some libraries import Node modules but don't use them in the browser.\n  // Tell Webpack to provide empty mocks for them so importing them works.\n  node: {\n    fs: 'empty',\n    net: 'empty',\n    tls: 'empty'\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-react-scripts/node_modules/react-scripts/config/webpack.config.prod.js":"// @remove-on-eject-begin\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n// @remove-on-eject-end\n'use strict';\n\nvar autoprefixer = require('autoprefixer');\nvar webpack = require('webpack');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar ManifestPlugin = require('webpack-manifest-plugin');\nvar InterpolateHtmlPlugin = require('react-dev-utils/InterpolateHtmlPlugin');\nvar paths = require('./paths');\nvar getClientEnvironment = require('./env');\n\n// @remove-on-eject-begin\n// `path` is not used after eject - see https://github.com/facebookincubator/create-react-app/issues/1174\nvar path = require('path');\n// @remove-on-eject-end\n\n// Webpack uses `publicPath` to determine where the app is being served from.\n// It requires a trailing slash, or the file assets will get an incorrect path.\nvar publicPath = paths.servedPath;\n// Some apps do not use client-side routing with pushState.\n// For these, \"homepage\" can be set to \".\" to enable relative asset paths.\nvar shouldUseRelativeAssetPaths = publicPath === './';\n// `publicUrl` is just like `publicPath`, but we will provide it to our app\n// as %PUBLIC_URL% in `index.html` and `process.env.PUBLIC_URL` in JavaScript.\n// Omit trailing slash as %PUBLIC_URL%/xyz looks better than %PUBLIC_URL%xyz.\nvar publicUrl = publicPath.slice(0, -1);\n// Get environment variables to inject into our app.\nvar env = getClientEnvironment(publicUrl);\n\n// Assert this just to be safe.\n// Development builds of React are slow and not intended for production.\nif (env.stringified['process.env'].NODE_ENV !== '\"production\"') {\n  throw new Error('Production builds must have NODE_ENV=production.');\n}\n\n// Note: defined here because it will be used more than once.\nconst cssFilename = 'static/css/[name].[contenthash:8].css';\n\n// ExtractTextPlugin expects the build output to be flat.\n// (See https://github.com/webpack-contrib/extract-text-webpack-plugin/issues/27)\n// However, our output is structured with css, js and media folders.\n// To have this structure working with relative paths, we have to use custom options.\nconst extractTextPluginOptions = shouldUseRelativeAssetPaths\n  // Making sure that the publicPath goes back to to build folder.\n  ? { publicPath: Array(cssFilename.split('/').length).join('../') }\n  : undefined;\n\n// This is the production configuration.\n// It compiles slowly and is focused on producing a fast and minimal bundle.\n// The development configuration is different and lives in a separate file.\nmodule.exports = {\n  // Don't attempt to continue if there are any errors.\n  bail: true,\n  // We generate sourcemaps in production. This is slow but gives good results.\n  // You can exclude the *.map files from the build during deployment.\n  devtool: 'source-map',\n  // In production, we only want to load the polyfills and the app code.\n  entry: [\n    require.resolve('./polyfills'),\n    paths.appIndexJs\n  ],\n  output: {\n    // The build folder.\n    path: paths.appBuild,\n    // Generated JS file names (with nested folders).\n    // There will be one main bundle, and one file per asynchronous chunk.\n    // We don't currently advertise code splitting but Webpack supports it.\n    filename: 'static/js/[name].[chunkhash:8].js',\n    chunkFilename: 'static/js/[name].[chunkhash:8].chunk.js',\n    // We inferred the \"public path\" (such as / or /my-project) from homepage.\n    publicPath: publicPath\n  },\n  resolve: {\n    // This allows you to set a fallback for where Webpack should look for modules.\n    // We read `NODE_PATH` environment variable in `paths.js` and pass paths here.\n    // We use `fallback` instead of `root` because we want `node_modules` to \"win\"\n    // if there any conflicts. This matches Node resolution mechanism.\n    // https://github.com/facebookincubator/create-react-app/issues/253\n    fallback: paths.nodePaths,\n    // These are the reasonable defaults supported by the Node ecosystem.\n    // We also include JSX as a common component filename extension to support\n    // some tools, although we do not recommend using it, see:\n    // https://github.com/facebookincubator/create-react-app/issues/290\n    extensions: ['.js', '.json', '.jsx', ''],\n    alias: {\n      // Support React Native Web\n      // https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/\n      'react-native': 'react-native-web'\n    }\n  },\n  // @remove-on-eject-begin\n  // Resolve loaders (webpack plugins for CSS, images, transpilation) from the\n  // directory of `react-scripts` itself rather than the project directory.\n  resolveLoader: {\n    root: paths.ownNodeModules,\n    moduleTemplates: ['*-loader']\n  },\n  // @remove-on-eject-end\n  module: {\n    // First, run the linter.\n    // It's important to do this before Babel processes the JS.\n    preLoaders: [\n      {\n        test: /\\.(js|jsx)$/,\n        loader: 'eslint',\n        include: paths.appSrc\n      }\n    ],\n    loaders: [\n      // ** ADDING/UPDATING LOADERS **\n      // The \"url\" loader handles all assets unless explicitly excluded.\n      // The `exclude` list *must* be updated with every change to loader extensions.\n      // When adding a new loader, you must add its `test`\n      // as a new entry in the `exclude` list in the \"url\" loader.\n\n      // \"url\" loader embeds assets smaller than specified size as data URLs to avoid requests.\n      // Otherwise, it acts like the \"file\" loader.\n      {\n        exclude: [\n          /\\.html$/,\n          /\\.(js|jsx)$/,\n          /\\.css$/,\n          /\\.json$/,\n          /\\.svg$/\n        ],\n        loader: 'url',\n        query: {\n          limit: 10000,\n          name: 'static/media/[name].[hash:8].[ext]'\n        }\n      },\n      // Process JS with Babel.\n      {\n        test: /\\.(js|jsx)$/,\n        include: paths.appSrc,\n        loader: 'babel',\n        // @remove-on-eject-begin\n        query: {\n          babelrc: false,\n          presets: [require.resolve('babel-preset-react-app')],\n        },\n        // @remove-on-eject-end\n      },\n      // The notation here is somewhat confusing.\n      // \"postcss\" loader applies autoprefixer to our CSS.\n      // \"css\" loader resolves paths in CSS and adds assets as dependencies.\n      // \"style\" loader normally turns CSS into JS modules injecting <style>,\n      // but unlike in development configuration, we do something different.\n      // `ExtractTextPlugin` first applies the \"postcss\" and \"css\" loaders\n      // (second argument), then grabs the result CSS and puts it into a\n      // separate file in our build process. This way we actually ship\n      // a single CSS file in production instead of JS code injecting <style>\n      // tags. If you use code splitting, however, any async bundles will still\n      // use the \"style\" loader inside the async code so CSS from them won't be\n      // in the main CSS file.\n      {\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract(\n          'style',\n          'css?importLoaders=1!postcss',\n          extractTextPluginOptions\n        )\n        // Note: this won't work without `new ExtractTextPlugin()` in `plugins`.\n      },\n      // JSON is not enabled by default in Webpack but both Node and Browserify\n      // allow it implicitly so we also enable it.\n      {\n        test: /\\.json$/,\n        loader: 'json'\n      },\n      // \"file\" loader for svg\n      {\n        test: /\\.svg$/,\n        loader: 'file',\n        query: {\n          name: 'static/media/[name].[hash:8].[ext]'\n        }\n      }\n      // ** STOP ** Are you adding a new loader?\n      // Remember to add the new extension(s) to the \"url\" loader exclusion list.\n    ]\n  },\n  // @remove-on-eject-begin\n  // Point ESLint to our predefined config.\n  eslint: {\n    // TODO: consider separate config for production,\n    // e.g. to enable no-console and no-debugger only in production.\n    configFile: path.join(__dirname, '../eslintrc'),\n    useEslintrc: false\n  },\n  // @remove-on-eject-end\n  // We use PostCSS for autoprefixing only.\n  postcss: function() {\n    return [\n      autoprefixer({\n        browsers: [\n          '>1%',\n          'last 4 versions',\n          'Firefox ESR',\n          'not ie < 9', // React doesn't support IE8 anyway\n        ]\n      }),\n    ];\n  },\n  plugins: [\n    // Makes some environment variables available in index.html.\n    // The public URL is available as %PUBLIC_URL% in index.html, e.g.:\n    // <link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n    // In production, it will be an empty string unless you specify \"homepage\"\n    // in `package.json`, in which case it will be the pathname of that URL.\n    new InterpolateHtmlPlugin(env.raw),\n    // Generates an `index.html` file with the <script> injected.\n    new HtmlWebpackPlugin({\n      inject: true,\n      template: paths.appHtml,\n      minify: {\n        removeComments: true,\n        collapseWhitespace: true,\n        removeRedundantAttributes: true,\n        useShortDoctype: true,\n        removeEmptyAttributes: true,\n        removeStyleLinkTypeAttributes: true,\n        keepClosingSlash: true,\n        minifyJS: true,\n        minifyCSS: true,\n        minifyURLs: true\n      }\n    }),\n    // Makes some environment variables available to the JS code, for example:\n    // if (process.env.NODE_ENV === 'production') { ... }. See `./env.js`.\n    // It is absolutely essential that NODE_ENV was set to production here.\n    // Otherwise React will be compiled in the very slow development mode.\n    new webpack.DefinePlugin(env.stringified),\n    // This helps ensure the builds are consistent if source hasn't changed:\n    new webpack.optimize.OccurrenceOrderPlugin(),\n    // Try to dedupe duplicated modules, if any:\n    new webpack.optimize.DedupePlugin(),\n    // Minify the code.\n    new webpack.optimize.UglifyJsPlugin({\n      compress: {\n        screw_ie8: true, // React doesn't support IE8\n        warnings: false\n      },\n      mangle: {\n        screw_ie8: true\n      },\n      output: {\n        comments: false,\n        screw_ie8: true\n      }\n    }),\n    // Note: this won't work without ExtractTextPlugin.extract(..) in `loaders`.\n    new ExtractTextPlugin(cssFilename),\n    // Generate a manifest file which contains a mapping of all asset filenames\n    // to their corresponding output file so that tools can pick it up without\n    // having to parse `index.html`.\n    new ManifestPlugin({\n      fileName: 'asset-manifest.json'\n    })\n  ],\n  // Some libraries import Node modules but don't use them in the browser.\n  // Tell Webpack to provide empty mocks for them so importing them works.\n  node: {\n    fs: 'empty',\n    net: 'empty',\n    tls: 'empty'\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-react-scripts/node_modules/react-scripts/scripts/eject.js":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n'use strict';\n\nvar createJestConfig = require('../utils/createJestConfig');\nvar fs = require('fs-extra');\nvar path = require('path');\nvar paths = require('../config/paths');\nvar prompt = require('react-dev-utils/prompt');\nvar spawnSync = require('cross-spawn').sync;\nvar chalk = require('chalk');\nvar green = chalk.green;\nvar cyan = chalk.cyan;\n\nprompt(\n  'Are you sure you want to eject? This action is permanent.',\n  false\n).then(shouldEject => {\n  if (!shouldEject) {\n    console.log(cyan('Close one! Eject aborted.'));\n    process.exit(1);\n  }\n\n  console.log('Ejecting...');\n\n  var ownPath = paths.ownPath;\n  var appPath = paths.appPath;\n\n  function verifyAbsent(file) {\n    if (fs.existsSync(path.join(appPath, file))) {\n      console.error(\n        '`' + file + '` already exists in your app folder. We cannot ' +\n        'continue as you would lose all the changes in that file or directory. ' +\n        'Please move or delete it (maybe make a copy for backup) and run this ' +\n        'command again.'\n      );\n      process.exit(1);\n    }\n  }\n\n  var folders = [\n    'config',\n    path.join('config', 'jest'),\n    'scripts'\n  ];\n\n  var files = [\n    path.join('config', 'env.js'),\n    path.join('config', 'paths.js'),\n    path.join('config', 'polyfills.js'),\n    path.join('config', 'webpack.config.dev.js'),\n    path.join('config', 'webpack.config.prod.js'),\n    path.join('config', 'jest', 'cssTransform.js'),\n    path.join('config', 'jest', 'fileTransform.js'),\n    path.join('scripts', 'build.js'),\n    path.join('scripts', 'start.js'),\n    path.join('scripts', 'test.js')\n  ];\n\n  // Ensure that the app folder is clean and we won't override any files\n  folders.forEach(verifyAbsent);\n  files.forEach(verifyAbsent);\n\n  // Copy the files over\n  folders.forEach(function(folder) {\n    fs.mkdirSync(path.join(appPath, folder))\n  });\n\n  console.log();\n  console.log(cyan('Copying files into ' + appPath));\n  files.forEach(function(file) {\n    console.log('  Adding ' + cyan(file) + ' to the project');\n    var content = fs\n      .readFileSync(path.join(ownPath, file), 'utf8')\n      // Remove dead code from .js files on eject\n      .replace(/\\/\\/ @remove-on-eject-begin([\\s\\S]*?)\\/\\/ @remove-on-eject-end/mg, '')\n      // Remove dead code from .applescript files on eject\n      .replace(/-- @remove-on-eject-begin([\\s\\S]*?)-- @remove-on-eject-end/mg, '')\n      .trim() + '\\n';\n    fs.writeFileSync(path.join(appPath, file), content);\n  });\n  console.log();\n\n  var ownPackage = require(path.join(ownPath, 'package.json'));\n  var appPackage = require(path.join(appPath, 'package.json'));\n  var babelConfig = JSON.parse(fs.readFileSync(path.join(ownPath, 'babelrc'), 'utf8'));\n  var eslintConfig = JSON.parse(fs.readFileSync(path.join(ownPath, 'eslintrc'), 'utf8'));\n\n  console.log(cyan('Updating the dependencies'));\n  var ownPackageName = ownPackage.name;\n  if (appPackage.devDependencies[ownPackageName]) {\n    console.log('  Removing ' + cyan(ownPackageName) + ' from devDependencies');\n    delete appPackage.devDependencies[ownPackageName];\n  }\n  if (appPackage.dependencies[ownPackageName]) {\n    console.log('  Removing ' + cyan(ownPackageName) + ' from dependencies');\n    delete appPackage.dependencies[ownPackageName];\n  }\n\n  Object.keys(ownPackage.dependencies).forEach(function (key) {\n    // For some reason optionalDependencies end up in dependencies after install\n    if (ownPackage.optionalDependencies[key]) {\n      return;\n    }\n    console.log('  Adding ' + cyan(key) + ' to devDependencies');\n    appPackage.devDependencies[key] = ownPackage.dependencies[key];\n  });\n  console.log();\n  console.log(cyan('Updating the scripts'));\n  delete appPackage.scripts['eject'];\n  Object.keys(appPackage.scripts).forEach(function (key) {\n    Object.keys(ownPackage.bin).forEach(function (binKey) {\n      var regex = new RegExp(binKey + ' (\\\\w+)', 'g');\n      appPackage.scripts[key] = appPackage.scripts[key]\n        .replace(regex, 'node scripts/$1.js');\n      console.log(\n        '  Replacing ' +\n        cyan('\"' + binKey + ' ' + key + '\"') +\n        ' with ' +\n        cyan('\"node scripts/' + key + '.js\"')\n      );\n    });\n  });\n\n  console.log();\n  console.log(cyan('Configuring package.json'));\n  // Add Jest config\n  console.log('  Adding ' + cyan('Jest') + ' configuration');\n  appPackage.jest = createJestConfig(\n    filePath => path.posix.join('<rootDir>', filePath),\n    null,\n    true\n  );\n\n  // Add Babel config\n  console.log('  Adding ' + cyan('Babel') + ' preset');\n  appPackage.babel = babelConfig;\n\n  // Add ESlint config\n  console.log('  Adding ' + cyan('ESLint') +' configuration');\n  appPackage.eslintConfig = eslintConfig;\n\n  fs.writeFileSync(\n    path.join(appPath, 'package.json'),\n    JSON.stringify(appPackage, null, 2) + '\\n'\n  );\n  console.log();\n\n  // \"Don't destroy what isn't ours\"\n  if (ownPath.indexOf(appPath) === 0) {\n    try {\n      // remove react-scripts and react-scripts binaries from app node_modules\n      Object.keys(ownPackage.bin).forEach(function(binKey) {\n        fs.removeSync(path.join(appPath, 'node_modules', '.bin', binKey));\n      });\n      fs.removeSync(ownPath);\n    } catch(e) {\n      // It's not essential that this succeeds\n    }\n  }\n\n  if (fs.existsSync(paths.yarnLockFile)) {\n    console.log(cyan('Running yarn...'));\n    spawnSync('yarnpkg', [], {stdio: 'inherit'});\n  } else {\n    console.log(cyan('Running npm install...'));\n    spawnSync('npm', ['install'], {stdio: 'inherit'});\n  }\n  console.log(green('Ejected successfully!'));\n  console.log();\n\n  console.log(green('Please consider sharing why you ejected in this survey:'));\n  console.log(green('  http://goo.gl/forms/Bi6CZjk1EqsdelXk1'));\n  console.log()\n})\n","/home/travis/build/npmtest/node-npmtest-react-scripts/node_modules/react-scripts/utils/createJestConfig.js":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n// Note: this file does not exist after ejecting.\n\nconst fs = require('fs');\nconst paths = require('../config/paths');\n\nmodule.exports = (resolve, rootDir, isEjecting) => {\n  // Use this instead of `paths.testsSetup` to avoid putting\n  // an absolute filename into configuration after ejecting.\n  const setupTestsFile = fs.existsSync(paths.testsSetup) ? '<rootDir>/src/setupTests.js' : undefined;\n\n  // TODO: I don't know if it's safe or not to just use / as path separator\n  // in Jest configs. We need help from somebody with Windows to determine this.\n  const config = {\n    collectCoverageFrom: ['src/**/*.{js,jsx}'],\n    setupFiles: [resolve('config/polyfills.js')],\n    setupTestFrameworkScriptFile: setupTestsFile,\n    testPathIgnorePatterns: [\n      '<rootDir>[/\\\\\\\\](build|docs|node_modules|scripts)[/\\\\\\\\]'\n    ],\n    testEnvironment: 'node',\n    testURL: 'http://localhost',\n    transform: {\n      '^.+\\\\.(js|jsx)$': isEjecting ?\n        '<rootDir>/node_modules/babel-jest'\n        : resolve('config/jest/babelTransform.js'),\n      '^.+\\\\.css$': resolve('config/jest/cssTransform.js'),\n      '^(?!.*\\\\.(js|jsx|css|json)$)': resolve('config/jest/fileTransform.js'),\n    },\n    transformIgnorePatterns: [\n      '[/\\\\\\\\]node_modules[/\\\\\\\\].+\\\\.(js|jsx)$'\n    ],\n    moduleNameMapper: {\n      '^react-native$': 'react-native-web'\n    }\n  };\n  if (rootDir) {\n    config.rootDir = rootDir;\n  }\n  return config;\n};\n","/home/travis/build/npmtest/node-npmtest-react-scripts/node_modules/react-scripts/scripts/init.js":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\nvar fs = require('fs-extra');\nvar path = require('path');\nvar spawn = require('cross-spawn');\nvar chalk = require('chalk');\n\nmodule.exports = function(appPath, appName, verbose, originalDirectory, template) {\n  var ownPackageName = require(path.join(__dirname, '..', 'package.json')).name;\n  var ownPath = path.join(appPath, 'node_modules', ownPackageName);\n  var appPackage = require(path.join(appPath, 'package.json'));\n  var useYarn = fs.existsSync(path.join(appPath, 'yarn.lock'));\n\n  // Copy over some of the devDependencies\n  appPackage.dependencies = appPackage.dependencies || {};\n  appPackage.devDependencies = appPackage.devDependencies || {};\n\n  // Setup the script rules\n  appPackage.scripts = {\n    'start': 'react-scripts start',\n    'build': 'react-scripts build',\n    'test': 'react-scripts test --env=jsdom',\n    'eject': 'react-scripts eject'\n  };\n\n  fs.writeFileSync(\n    path.join(appPath, 'package.json'),\n    JSON.stringify(appPackage, null, 2)\n  );\n\n  var readmeExists = fs.existsSync(path.join(appPath, 'README.md'));\n  if (readmeExists) {\n    fs.renameSync(path.join(appPath, 'README.md'), path.join(appPath, 'README.old.md'));\n  }\n\n  // Copy the files for the user\n  var templatePath = template ? path.resolve(originalDirectory, template) : path.join(ownPath, 'template');\n  if (fs.existsSync(templatePath)) {\n    fs.copySync(templatePath, appPath);\n  } else {\n    console.error('Could not locate supplied template: ' + chalk.green(templatePath));\n    return;\n  }\n\n  // Rename gitignore after the fact to prevent npm from renaming it to .npmignore\n  // See: https://github.com/npm/npm/issues/1862\n  fs.move(path.join(appPath, 'gitignore'), path.join(appPath, '.gitignore'), [], function (err) {\n    if (err) {\n      // Append if there's already a `.gitignore` file there\n      if (err.code === 'EEXIST') {\n        var data = fs.readFileSync(path.join(appPath, 'gitignore'));\n        fs.appendFileSync(path.join(appPath, '.gitignore'), data);\n        fs.unlinkSync(path.join(appPath, 'gitignore'));\n      } else {\n        throw err;\n      }\n    }\n  });\n\n  var command;\n  var args;\n\n  if (useYarn) {\n    command = 'yarnpkg';\n    args = ['add'];\n  } else {\n    command = 'npm';\n    args = [\n      'install',\n      '--save',\n      verbose && '--verbose'\n    ].filter(function(e) { return e; });\n  }\n  args.push('react', 'react-dom');\n\n  // Install additional template dependencies, if present\n  var templateDependenciesPath = path.join(appPath, '.template.dependencies.json');\n  if (fs.existsSync(templateDependenciesPath)) {\n    var templateDependencies = require(templateDependenciesPath).dependencies;\n    args = args.concat(Object.keys(templateDependencies).map(function (key) {\n      return key + '@' + templateDependencies[key];\n    }));\n    fs.unlinkSync(templateDependenciesPath);\n  }\n\n  // Install react and react-dom for backward compatibility with old CRA cli\n  // which doesn't install react and react-dom along with react-scripts\n  // or template is presetend (via --internal-testing-template)\n  if (!isReactInstalled(appPackage) || template) {\n    console.log('Installing react and react-dom using ' + command + '...');\n    console.log();\n\n    var proc = spawn.sync(command, args, {stdio: 'inherit'});\n    if (proc.status !== 0) {\n      console.error('`' + command + ' ' + args.join(' ') + '` failed');\n      return;\n    }\n  }\n\n  // Display the most elegant way to cd.\n  // This needs to handle an undefined originalDirectory for\n  // backward compatibility with old global-cli's.\n  var cdpath;\n  if (originalDirectory &&\n      path.join(originalDirectory, appName) === appPath) {\n    cdpath = appName;\n  } else {\n    cdpath = appPath;\n  }\n\n  // Change displayed command to yarn instead of yarnpkg\n  var displayedCommand = useYarn ? 'yarn' : 'npm';\n\n  console.log();\n  console.log('Success! Created ' + appName + ' at ' + appPath);\n  console.log('Inside that directory, you can run several commands:');\n  console.log();\n  console.log(chalk.cyan('  ' + displayedCommand + ' start'));\n  console.log('    Starts the development server.');\n  console.log();\n  console.log(chalk.cyan('  ' + displayedCommand + ' run build'));\n  console.log('    Bundles the app into static files for production.');\n  console.log();\n  console.log(chalk.cyan('  ' + displayedCommand + ' test'));\n  console.log('    Starts the test runner.');\n  console.log();\n  console.log(chalk.cyan('  ' + displayedCommand + ' run eject'));\n  console.log('    Removes this tool and copies build dependencies, configuration files');\n  console.log('    and scripts into the app directory. If you do this, you can’t go back!');\n  console.log();\n  console.log('We suggest that you begin by typing:');\n  console.log();\n  console.log(chalk.cyan('  cd'), cdpath);\n  console.log('  ' + chalk.cyan(displayedCommand + ' start'));\n  if (readmeExists) {\n    console.log();\n    console.log(chalk.yellow('You had a `README.md` file, we renamed it to `README.old.md`'));\n  }\n  console.log();\n  console.log('Happy hacking!');\n};\n\nfunction isReactInstalled(appPackage) {\n  var dependencies = appPackage.dependencies || {};\n\n  return (\n    typeof dependencies.react !== 'undefined' &&\n    typeof dependencies['react-dom'] !== 'undefined'\n  )\n}\n","/home/travis/build/npmtest/node-npmtest-react-scripts/node_modules/react-scripts/scripts/start.js":"// @remove-on-eject-begin\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n// @remove-on-eject-end\n\n'use strict';\n\nprocess.env.NODE_ENV = 'development';\n\n// Load environment variables from .env file. Suppress warnings using silent\n// if this file is missing. dotenv will never modify any environment variables\n// that have already been set.\n// https://github.com/motdotla/dotenv\nrequire('dotenv').config({silent: true});\n\nvar chalk = require('chalk');\nvar webpack = require('webpack');\nvar WebpackDevServer = require('webpack-dev-server');\nvar historyApiFallback = require('connect-history-api-fallback');\nvar httpProxyMiddleware = require('http-proxy-middleware');\nvar detect = require('detect-port');\nvar clearConsole = require('react-dev-utils/clearConsole');\nvar checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');\nvar formatWebpackMessages = require('react-dev-utils/formatWebpackMessages');\nvar getProcessForPort = require('react-dev-utils/getProcessForPort');\nvar openBrowser = require('react-dev-utils/openBrowser');\nvar prompt = require('react-dev-utils/prompt');\nvar fs = require('fs');\nvar config = require('../config/webpack.config.dev');\nvar paths = require('../config/paths');\n\nvar useYarn = fs.existsSync(paths.yarnLockFile);\nvar cli = useYarn ? 'yarn' : 'npm';\nvar isInteractive = process.stdout.isTTY;\n\n// Warn and crash if required files are missing\nif (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {\n  process.exit(1);\n}\n\n// Tools like Cloud9 rely on this.\nvar DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;\nvar compiler;\nvar handleCompile;\n\n// You can safely remove this after ejecting.\n// We only use this block for testing of Create React App itself:\nvar isSmokeTest = process.argv.some(arg => arg.indexOf('--smoke-test') > -1);\nif (isSmokeTest) {\n  handleCompile = function (err, stats) {\n    if (err || stats.hasErrors() || stats.hasWarnings()) {\n      process.exit(1);\n    } else {\n      process.exit(0);\n    }\n  };\n}\n\nfunction setupCompiler(host, port, protocol) {\n  // \"Compiler\" is a low-level interface to Webpack.\n  // It lets us listen to some events and provide our own custom messages.\n  compiler = webpack(config, handleCompile);\n\n  // \"invalid\" event fires when you have changed a file, and Webpack is\n  // recompiling a bundle. WebpackDevServer takes care to pause serving the\n  // bundle, so if you refresh, it'll wait instead of serving the old one.\n  // \"invalid\" is short for \"bundle invalidated\", it doesn't imply any errors.\n  compiler.plugin('invalid', function() {\n    if (isInteractive) {\n      clearConsole();\n    }\n    console.log('Compiling...');\n  });\n\n  var isFirstCompile = true;\n\n  // \"done\" event fires when Webpack has finished recompiling the bundle.\n  // Whether or not you have warnings or errors, you will get this event.\n  compiler.plugin('done', function(stats) {\n    if (isInteractive) {\n      clearConsole();\n    }\n\n    // We have switched off the default Webpack output in WebpackDevServer\n    // options so we are going to \"massage\" the warnings and errors and present\n    // them in a readable focused way.\n    var messages = formatWebpackMessages(stats.toJson({}, true));\n    var isSuccessful = !messages.errors.length && !messages.warnings.length;\n    var showInstructions = isSuccessful && (isInteractive || isFirstCompile);\n\n    if (isSuccessful) {\n      console.log(chalk.green('Compiled successfully!'));\n    }\n\n    if (showInstructions) {\n      console.log();\n      console.log('The app is running at:');\n      console.log();\n      console.log('  ' + chalk.cyan(protocol + '://' + host + ':' + port + '/'));\n      console.log();\n      console.log('Note that the development build is not optimized.');\n      console.log('To create a production build, use ' + chalk.cyan(cli + ' run build') + '.');\n      console.log();\n      isFirstCompile = false;\n    }\n\n    // If errors exist, only show errors.\n    if (messages.errors.length) {\n      console.log(chalk.red('Failed to compile.'));\n      console.log();\n      messages.errors.forEach(message => {\n        console.log(message);\n        console.log();\n      });\n      return;\n    }\n\n    // Show warnings if no errors were found.\n    if (messages.warnings.length) {\n      console.log(chalk.yellow('Compiled with warnings.'));\n      console.log();\n      messages.warnings.forEach(message => {\n        console.log(message);\n        console.log();\n      });\n      // Teach some ESLint tricks.\n      console.log('You may use special comments to disable some warnings.');\n      console.log('Use ' + chalk.yellow('// eslint-disable-next-line') + ' to ignore the next line.');\n      console.log('Use ' + chalk.yellow('/* eslint-disable */') + ' to ignore all warnings in a file.');\n    }\n  });\n}\n\n// We need to provide a custom onError function for httpProxyMiddleware.\n// It allows us to log custom error messages on the console.\nfunction onProxyError(proxy) {\n  return function(err, req, res){\n    var host = req.headers && req.headers.host;\n    console.log(\n      chalk.red('Proxy error:') + ' Could not proxy request ' + chalk.cyan(req.url) +\n      ' from ' + chalk.cyan(host) + ' to ' + chalk.cyan(proxy) + '.'\n    );\n    console.log(\n      'See https://nodejs.org/api/errors.html#errors_common_system_errors for more information (' +\n      chalk.cyan(err.code) + ').'\n    );\n    console.log();\n\n    // And immediately send the proper error response to the client.\n    // Otherwise, the request will eventually timeout with ERR_EMPTY_RESPONSE on the client side.\n    if (res.writeHead && !res.headersSent) {\n        res.writeHead(500);\n    }\n    res.end('Proxy error: Could not proxy request ' + req.url + ' from ' +\n      host + ' to ' + proxy + ' (' + err.code + ').'\n    );\n  }\n}\n\nfunction addMiddleware(devServer) {\n  // `proxy` lets you to specify a fallback server during development.\n  // Every unrecognized request will be forwarded to it.\n  var proxy = require(paths.appPackageJson).proxy;\n  devServer.use(historyApiFallback({\n    // Paths with dots should still use the history fallback.\n    // See https://github.com/facebookincubator/create-react-app/issues/387.\n    disableDotRule: true,\n    // For single page apps, we generally want to fallback to /index.html.\n    // However we also want to respect `proxy` for API calls.\n    // So if `proxy` is specified, we need to decide which fallback to use.\n    // We use a heuristic: if request `accept`s text/html, we pick /index.html.\n    // Modern browsers include text/html into `accept` header when navigating.\n    // However API calls like `fetch()` won’t generally accept text/html.\n    // If this heuristic doesn’t work well for you, don’t use `proxy`.\n    htmlAcceptHeaders: proxy ?\n      ['text/html'] :\n      ['text/html', '*/*']\n  }));\n  if (proxy) {\n    if (typeof proxy !== 'string') {\n      console.log(chalk.red('When specified, \"proxy\" in package.json must be a string.'));\n      console.log(chalk.red('Instead, the type of \"proxy\" was \"' + typeof proxy + '\".'));\n      console.log(chalk.red('Either remove \"proxy\" from package.json, or make it a string.'));\n      process.exit(1);\n    }\n\n    // Otherwise, if proxy is specified, we will let it handle any request.\n    // There are a few exceptions which we won't send to the proxy:\n    // - /index.html (served as HTML5 history API fallback)\n    // - /*.hot-update.json (WebpackDevServer uses this too for hot reloading)\n    // - /sockjs-node/* (WebpackDevServer uses this for hot reloading)\n    // Tip: use https://jex.im/regulex/ to visualize the regex\n    var mayProxy = /^(?!\\/(index\\.html$|.*\\.hot-update\\.json$|sockjs-node\\/)).*$/;\n\n    // Pass the scope regex both to Express and to the middleware for proxying\n    // of both HTTP and WebSockets to work without false positives.\n    var hpm = httpProxyMiddleware(pathname => mayProxy.test(pathname), {\n      target: proxy,\n      logLevel: 'silent',\n      onProxyReq: function(proxyReq) {\n        // Browers may send Origin headers even with same-origin\n        // requests. To prevent CORS issues, we have to change\n        // the Origin to match the target URL.\n        if (proxyReq.getHeader('origin')) {\n          proxyReq.setHeader('origin', proxy);\n        }\n      },\n      onError: onProxyError(proxy),\n      secure: false,\n      changeOrigin: true,\n      ws: true,\n      xfwd: true\n    });\n    devServer.use(mayProxy, hpm);\n\n    // Listen for the websocket 'upgrade' event and upgrade the connection.\n    // If this is not done, httpProxyMiddleware will not try to upgrade until\n    // an initial plain HTTP request is made.\n    devServer.listeningApp.on('upgrade', hpm.upgrade);\n  }\n\n  // Finally, by now we have certainly resolved the URL.\n  // It may be /index.html, so let the dev server try serving it again.\n  devServer.use(devServer.middleware);\n}\n\nfunction runDevServer(host, port, protocol) {\n  var devServer = new WebpackDevServer(compiler, {\n    // Enable gzip compression of generated files.\n    compress: true,\n    // Silence WebpackDevServer's own logs since they're generally not useful.\n    // It will still show compile warnings and errors with this setting.\n    clientLogLevel: 'none',\n    // By default WebpackDevServer serves physical files from current directory\n    // in addition to all the virtual build products that it serves from memory.\n    // This is confusing because those files won’t automatically be available in\n    // production build folder unless we copy them. However, copying the whole\n    // project directory is dangerous because we may expose sensitive files.\n    // Instead, we establish a convention that only files in `public` directory\n    // get served. Our build script will copy `public` into the `build` folder.\n    // In `index.html`, you can get URL of `public` folder with %PUBLIC_URL%:\n    // <link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n    // In JavaScript code, you can access it with `process.env.PUBLIC_URL`.\n    // Note that we only recommend to use `public` folder as an escape hatch\n    // for files like `favicon.ico`, `manifest.json`, and libraries that are\n    // for some reason broken when imported through Webpack. If you just want to\n    // use an image, put it in `src` and `import` it from JavaScript instead.\n    contentBase: paths.appPublic,\n    // Enable hot reloading server. It will provide /sockjs-node/ endpoint\n    // for the WebpackDevServer client so it can learn when the files were\n    // updated. The WebpackDevServer client is included as an entry point\n    // in the Webpack development configuration. Note that only changes\n    // to CSS are currently hot reloaded. JS changes will refresh the browser.\n    hot: true,\n    // It is important to tell WebpackDevServer to use the same \"root\" path\n    // as we specified in the config. In development, we always serve from /.\n    publicPath: config.output.publicPath,\n    // WebpackDevServer is noisy by default so we emit custom message instead\n    // by listening to the compiler events with `compiler.plugin` calls above.\n    quiet: true,\n    // Reportedly, this avoids CPU overload on some systems.\n    // https://github.com/facebookincubator/create-react-app/issues/293\n    watchOptions: {\n      ignored: /node_modules/\n    },\n    // Enable HTTPS if the HTTPS environment variable is set to 'true'\n    https: protocol === \"https\",\n    host: host\n  });\n\n  // Our custom middleware proxies requests to /index.html or a remote API.\n  addMiddleware(devServer);\n\n  // Launch WebpackDevServer.\n  devServer.listen(port, err => {\n    if (err) {\n      return console.log(err);\n    }\n\n    if (isInteractive) {\n      clearConsole();\n    }\n    console.log(chalk.cyan('Starting the development server...'));\n    console.log();\n\n    openBrowser(protocol + '://' + host + ':' + port + '/');\n  });\n}\n\nfunction run(port) {\n  var protocol = process.env.HTTPS === 'true' ? \"https\" : \"http\";\n  var host = process.env.HOST || 'localhost';\n  setupCompiler(host, port, protocol);\n  runDevServer(host, port, protocol);\n}\n\n// We attempt to use the default port but if it is busy, we offer the user to\n// run on a different port. `detect()` Promise resolves to the next free port.\ndetect(DEFAULT_PORT).then(port => {\n  if (port === DEFAULT_PORT) {\n    run(port);\n    return;\n  }\n\n  if (isInteractive) {\n    clearConsole();\n    var existingProcess = getProcessForPort(DEFAULT_PORT);\n    var question =\n      chalk.yellow('Something is already running on port ' + DEFAULT_PORT + '.' +\n        ((existingProcess) ? ' Probably:\\n  ' + existingProcess : '')) +\n        '\\n\\nWould you like to run the app on another port instead?';\n\n    prompt(question, true).then(shouldChangePort => {\n      if (shouldChangePort) {\n        run(port);\n      }\n    });\n  } else {\n    console.log(chalk.red('Something is already running on port ' + DEFAULT_PORT + '.'));\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-react-scripts/node_modules/react-scripts/config/jest/babelTransform.js":"/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\nconst babelJest = require('babel-jest');\n\nmodule.exports = babelJest.createTransformer({\n  presets: [require.resolve('babel-preset-react-app')],\n  babelrc: false\n});\n","/home/travis/build/npmtest/node-npmtest-react-scripts/node_modules/react-scripts/config/jest/cssTransform.js":"// @remove-on-eject-begin\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n// @remove-on-eject-end\n'use strict';\n\n// This is a custom Jest transformer turning style imports into empty objects.\n// http://facebook.github.io/jest/docs/tutorial-webpack.html\n\nmodule.exports = {\n  process() {\n    return 'module.exports = {};';\n  },\n  getCacheKey() {\n    // The output is always the same.\n    return 'cssTransform';\n  },\n};\n","/home/travis/build/npmtest/node-npmtest-react-scripts/node_modules/react-scripts/config/jest/fileTransform.js":"// @remove-on-eject-begin\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n// @remove-on-eject-end\n'use strict';\n\nconst path = require('path');\n\n// This is a custom Jest transformer turning file imports into filenames.\n// http://facebook.github.io/jest/docs/tutorial-webpack.html\n\nmodule.exports = {\n  process(src, filename) {\n    return 'module.exports = ' + JSON.stringify(path.basename(filename)) + ';';\n  },\n};\n","/home/travis/build/npmtest/node-npmtest-react-scripts/node_modules/react-scripts/template/src/App.js":"import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>Welcome to React</h2>\n        </div>\n        <p className=\"App-intro\">\n          To get started, edit <code>src/App.js</code> and save to reload.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/home/travis/build/npmtest/node-npmtest-react-scripts/node_modules/react-scripts/template/src/index.js":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"}